@using AppFront.Shared.Components
@using Flurl.Http
@using Mars.Nodes.Core
@using Mars.Nodes.Core.Attributes
@using Mars.Nodes.FormEditor
@using Mars.Nodes.FormEditor.EditForms.Components
@using Mars.PlayAudioNodePlugin.Nodes.Nodes
@using Mars.PlayAudioNodePlugin.Shared.Dto
@using Microsoft.FluentUI.AspNetCore.Components
@inherits NodeEditForm
@attribute [NodeEditFormForNode(typeof(PlayAudioConfigNode))]

<div class="form-group compact" style="--fluent-input-label-basis:150px">
    <div class="vstack gap-2">

        <FormItem2 For="() => Node.DefaultOutputDevice">
            <FluentSelect TOption="OutputDeviceResponse"
                          Items="_outputDevices"
                          Class="w-100"
                          OptionText="@(f=>f.FriendlyName)"
                          OptionValue="@(f=>f.DeviceId)"
                          @bind-SelectedOption="_selOutputDevice"
                          @bind-Value=@Node.DefaultOutputDevice />
        </FormItem2>

        <FormItem2 For="() => Node.DefaultPlayVolume">
            <FluentNumberField TValue="float" @bind-Value=@Node.DefaultPlayVolume Class="" Min="-1" Max="1" />
        </FormItem2>

    </div>
</div>

@code {
    [CascadingParameter] Node? Value { get; set; }
    PlayAudioConfigNode Node { get => (PlayAudioConfigNode)Value!; set => Value = value; }

    string url = "/api/PlayAudioNodePlugin/OutputDevices";
    OutputDeviceResponse[] _outputDevices = [];
    static readonly OutputDeviceResponse empty = new() { DeviceId = "", DeviceName = "default", FriendlyName = "default", IsDefault = false };

    [Inject] IFlurlClient _client { get; set; } = default!;
    [Inject] AppFront.Shared.Interfaces.IMessageService _messageService { get; set; } = default!;


    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (_outputDevices.Length == 0) Load();
    }

    OutputDeviceResponse _selOutputDevice = empty;

    async void Load()
    {
        try
        {
            var list = await _client.Request(url).GetJsonAsync<OutputDeviceResponse[]>();
            _outputDevices = [empty, .. list];

            if (!string.IsNullOrEmpty(Node.DefaultOutputDevice))
            {
                _selOutputDevice = list.FirstOrDefault(s => s.DeviceId == Node.DefaultOutputDevice) ?? empty;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _ = _messageService.Error(ex.Message);
        }
    }
}

